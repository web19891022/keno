declare module 'string' {
  declare interface String {
    s: string,
    between: (left: string, right: string) => String,
    camelize: () => String,
    chompLeft: (prefix: string) => String,
    chompRight: (prefix: string) => String,
    collapseWhitespace: () => String,
    contains: (ss: string) => boolean,
    count: (substring: string) => number,
    dasherize: () => String,
    decodeHTMLEntities: () => String,
    endsWith: (ss: string) => boolean,
    escapeHTML: () => String,
    extendPrototype: () => void,
    ensureLeft: (prefix: string) => String,
    ensureRight: (prefix: string) => String,
    humanize: () => String,
    include: (ss: string) => boolean,
    isAlpha: () => boolean,
    isAlphaNumeric: () => boolean,
    isEmpty: () => boolean,
    isLower: () => boolean,
    isNumeric: () => boolean,
    isUpper: () => boolean,
    latinise: () => String,
    left: (n: number) => String,
    length: number,
    lines: Array<string>,
    pad: (len: number, char: ?string|number) =>String,
    padLeft: (len: number, char: ?string|number) =>String,
    padRight: (len: number, char: ?string|number) =>String,
    parseCSV: (delimiter: string, qualifier: string, escape: string, lineDelimiter: string) => String;
    repeat: (n: number) => String,
    replaceAll: (ss: string, newstr: string) => String,
    restorePrototype: () => void,
    right: (n: number) => String,
    setValue: (ss: string) => String,
    slugify: () => String,
    splitLeft: (sep: string, maxSplit: ?number, limit: ?number) => Array<string>,
    splitRight: (sep: string, maxSplit: ?number, limit: ?number) => Array<string>,
    startsWith: (prefix: string) => boolean,
    strip: (...strings: Array<string>) => String,
    stripLeft: (...strings: Array<string>) => String,
    stripRight: (...strings: Array<string>) => String,
    stripPunctuation: () => String,
    stripTags: (...strings: Array<string>) => String,
    template: (values: Object, open: ?string, close: ?string) => String,
    times: (n: number) => String,
    toCSV: (delimiter: string|{
      delimiter: ?string,
      qualifier: ?string,
      escape: string,
      encloseNumbers: boolean,
      keys: Array<any>|Object}, qualifier: ?string) => String,
    toFloat: () => number,
    toInt: () => Number,
    toInteger: () => Number,
    toString: () => string,
    trim: () => String,
    trimLeft: () => String,
    trimRight: () => String,
    truncate: (length: string, chars: ?string) => String,
    underscore: () => String,
    unescapeHTML: () => String,
    wrapHTML: (tag: string, props: ?Object) => String,
    VERSION: string
  }
  declare var exports: (str: string) => String
}
